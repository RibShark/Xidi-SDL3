/*****************************************************************************
 * Xidi
 *   DirectInput interface for XInput controllers.
 *****************************************************************************
 * Authored by Samuel Grossman
 * Copyright (c) 2016-2022
 *************************************************************************//**
 * @file MockMouse.h
 *   Declaration of a mock version of the mouse interface along with
 *   additional testing-specific functions.
 *****************************************************************************/

#pragma once

#include "ApiBitSet.h"
#include "ControllerTypes.h"
#include "Mouse.h"


namespace XidiTest
{
    using namespace ::Xidi::Mouse;
    using ::Xidi::Controller::TControllerIdentifier;


    /// Object used to exert behavioral control over the mouse interface.
    /// The mouse interface itself is implemented as free functions.
    /// Test cases can use instances of this object to capture state changes to the virtual mouse.
    /// If any mouse interface functions are called while no mock mouse object is capturing state, the test case will fail.
    class MockMouse
    {
    private:
        // -------- INSTANCE VARIABLES ------------------------------------- //

        /// Holds the state of the virtual mouse that is represented by this object.
        Xidi::BitSet<(unsigned int)EMouseButton::Count> virtualMouseButtonState;


    public:
        // -------- CONSTRUCTION AND DESTRUCTION --------------------------- //

        /// Default destructor.
        ~MockMouse(void);


        // -------- OPERATORS ---------------------------------------------- //

        /// Simple equality check by comparing all the individual mouse state objects that comprise the virtual mouse state.
        /// @param [in] other Object with which to compare.
        /// @return `true` if this object is equal to the other object, `false` otherwise.
        constexpr inline bool operator==(const MockMouse& other) const
        {
            return (virtualMouseButtonState == other.virtualMouseButtonState);
        }


        // -------- INSTANCE METHODS --------------------------------------- //

        /// Installs this virtual mouse as the one to which mouse events generated by mouse interface function calls will be recorded.
        void BeginCapture(void);

        /// Removes this virtual mouse as the one to which mouse events generated by the mouse interface function calls will be recorded.
        /// Upon completion, no virtual mouse is the target of any captures.
        void EndCapture(void);

        /// Submits a mouse button state of pressed.
        /// @param [in] button Mouse button that is affected.
        void SubmitMouseButtonPressedState(EMouseButton button);

        /// Submits a mouse button state of released.
        /// @param [in] button Mouse button that is affected.
        void SubmitMouseButtonReleasedState(EMouseButton button);
    };
}
