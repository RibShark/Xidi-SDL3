/***************************************************************************************************
 * Xidi
 *   DirectInput interface for XInput controllers.
 ***************************************************************************************************
 * Authored by Samuel Grossman
 * Copyright (c) 2016-2024
 ***********************************************************************************************//**
 * @file MockKeyboard.h
 *   Declaration of a mock version of the keyboard interface along with additional
 *   testing-specific functions.
 **************************************************************************************************/

#pragma once

#include "ApiBitSet.h"
#include "ControllerTypes.h"
#include "Keyboard.h"

namespace XidiTest
{
  using namespace ::Xidi::Keyboard;
  using ::Xidi::Controller::TControllerIdentifier;

  /// Object used to exert behavioral control over the keyboard interface. The keyboard interface
  /// itself is implemented as free functions. Test cases can use instances of this object to
  /// capture state changes to the virtual keyboard. If any keyboard interface functions are called
  /// while no mock keyboard object is capturing state, the test case will fail.
  class MockKeyboard
  {
  public:

    ~MockKeyboard(void);

    constexpr bool operator==(const MockKeyboard& other) const
    {
      return (virtualKeyboardState == other.virtualKeyboardState);
    }

    /// Installs this virtual keyboard as the one to which keyboard events generated by keyboard
    /// interface function calls will be recorded.
    void BeginCapture(void);

    /// Removes this virtual keyboard as the one to which keyboard events generated by the keyboard
    /// interface function calls will be recorded. Upon completion, no virtual keyboard is the
    /// target of any captures.
    void EndCapture(void);

    /// Submits a key state of pressed.
    /// @param [in] key Keyboard key that is affected.
    void SubmitKeyPressedState(TKeyIdentifier key);

    /// Submits a key state of released.
    /// @param [in] key Keyboard key that is affected.
    void SubmitKeyReleasedState(TKeyIdentifier key);

  private:

    /// Holds the state of the virtual keyboard that is represented by this object.
    Xidi::BitSet<kVirtualKeyboardKeyCount> virtualKeyboardState;
  };
} // namespace XidiTest
