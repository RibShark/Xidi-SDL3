/*****************************************************************************
 * Xidi
 *   DirectInput interface for XInput controllers.
 *****************************************************************************
 * Authored by Samuel Grossman
 * Copyright (c) 2016-2021
 *************************************************************************//**
 * @file MockKeyboard.h
 *   Declaration of a mock version of the keyboard interface along with
 *   additional testing-specific functions.
 *****************************************************************************/

#pragma once

#include "ApiBitSet.h"
#include "ControllerTypes.h"
#include "Keyboard.h"


namespace XidiTest
{
    using namespace ::Xidi::Keyboard;
    using ::Xidi::Controller::TControllerIdentifier;


    /// Object used to exert behavioral control over the keyboard interface.
    /// The keyboard interface itself is implemented as free functions.
    /// Test cases can use instances of this object to capture state changes to the virtual keyboard.
    /// If any keyboard interface functions are called while no mock keyboard object is capturing state, the test case will fail.
    class MockKeyboard
    {
    private:
        // -------- INSTANCE VARIABLES ------------------------------------- //

        /// Holds the state of the virtual keyboard that is represented by this object.
        Xidi::BitSet<kVirtualKeyboardKeyCount> virtualKeyboardState;


    public:
        // -------- CONSTRUCTION AND DESTRUCTION --------------------------- //

        /// Default destructor.
        ~MockKeyboard(void);


        // -------- OPERATORS ---------------------------------------------- //

        /// Simple equality check by comparing all the individual key state objects that comprise the virtual keyboard state.
        /// @param [in] other Object with which to compare.
        /// @return `true` if this object is equal to the other object, `false` otherwise.
        constexpr inline bool operator==(const MockKeyboard& other) const
        {
            return (virtualKeyboardState == other.virtualKeyboardState);
        }


        // -------- INSTANCE METHODS --------------------------------------- //

        /// Installs this virtual keyboard as the one to which keyboard events generated by keyboard interface function calls will be recorded.
        void BeginCapture(void);

        /// Removes this virtual keyboard as the one to which keyboard events generated by the keyboard interface function calls will be recorded.
        /// Upon completion, no virtual keyboard is the target of any captures.
        void EndCapture(void);

        /// Submits a key state of pressed from a particular identified controller.
        /// @param [in] controllerIdentifier Identifier of the controller that is the source of the key press state.
        /// @param [in] key Keyboard key that is affected.
        void SubmitKeyPressedState(TKeyIdentifier key);

        /// Submits a key state of released from a particular identified controller.
        /// @param [in] controllerIdentifier Identifier of the controller that is the source of the key state.
        /// @param [in] key Keyboard key that is affected.
        void SubmitKeyReleasedState(TKeyIdentifier key);
    };
}
